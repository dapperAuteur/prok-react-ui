{"version":3,"sources":["components/Match/Match0001.js","components/Match/Matches.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","Match0001","_useState","useState","_useState2","Object","slicedToArray","hName","_useState3","_useState4","homeState","setHomeState","_useState5","_useState6","aName","_useState7","_useState8","awayState","setAwayState","_useState9","_useState10","currentInning","setInning","_useState11","_useState12","balls","setBalls","_useState13","_useState14","strikes","setStrikes","_useState15","_useState16","fouls","setFouls","_useState17","_useState18","outs","setOuts","resetMatch","incrementOuts","createMatch","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","match","resMatch","wrap","_context","prev","next","axios","post","then","res","console","log","catch","err","sent","stop","_x","apply","this","arguments","useEffect","document","title","concat","react_default","createElement","onClick","onSubmit","e","preventDefault","homeTeamScore","awayTeamScore","newMatch","type","className","matches","matchData","getMatches","get","Matches","setTimeout","data","App","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75a7696f.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n// import { create } from \"domain\";\nconst API_URL = \"//localhost:8080/api/ver0001/matches\";\n\nexport default function Match0001() {\n  const [hName, sethName] = useState(\"Home Team\");\n  const [homeState, setHomeState] = useState(0);\n  const [aName, setaName] = useState(\"Away Team\");\n  const [awayState, setAwayState] = useState(0);\n  const [currentInning, setInning] = useState(0);\n  const [balls, setBalls] = useState(0);\n  const [strikes, setStrikes] = useState(0);\n  const [fouls, setFouls] = useState(0);\n  const [outs, setOuts] = useState(0);\n\n  const INNINGS = [\n    \"Top 1st\",\n    \"Bottom 1st\",\n    \"Top 2nd\",\n    \"Bottom 2nd\",\n    \"Top 3rd\",\n    \"Bottom 3rd\",\n    \"Top 4th\",\n    \"Bottom 4th\",\n    \"Top 5th\",\n    \"Bottom 5th\",\n    \"Top 6th\",\n    \"Bottom 6th\",\n    \"MATCH OVER\"\n  ];\n\n  function resetMatch() {\n    setBalls(0);\n    setStrikes(0);\n    setFouls(0);\n  }\n\n  function incrementBalls() {\n    setBalls(balls + 1);\n  }\n\n  function incrementStrikes() {\n    setStrikes(strikes + 1);\n  }\n\n  function incrementFouls() {\n    setFouls(fouls + 1);\n  }\n\n  function incrementOuts() {\n    setOuts(outs + 1);\n    resetMatch();\n  }\n\n  const createMatch = async function(match) {\n    const resMatch = await axios\n      .post(API_URL, match)\n      .then(function(res) {\n        console.log(\"res 60\", res);\n      })\n      .catch(function(err) {\n        console.log(\"err 63\", err);\n      });\n    console.log(\"resMatch 65\", resMatch);\n  };\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const match = {\n      homeTeamScore: homeState,\n      awayTeamScore: awayState,\n      currentInning: \"Top 1st\",\n      balls,\n      strikes,\n      fouls,\n      outs\n    };\n    console.log(\"match 79\", match);\n    const newMatch = createMatch(match);\n    console.log(\"newMatch 81\", newMatch);\n  }\n\n  // function handleChange(e) {\n  //   console.log(\"hName\", hName);\n  //   sethName({ [e.target.name]: e.target.value });\n  // }\n\n  useEffect(() => {\n    document.title = `Home: ${homeState} vs Away: ${awayState}`;\n    if (fouls === 4 || strikes === 3) {\n      resetMatch();\n      incrementOuts();\n    }\n    if (outs === 3) {\n      setInning(currentInning + 1);\n      setOuts(0);\n    }\n    if (balls === 4) {\n      console.log(\"balls, now walk\", balls);\n      resetMatch();\n    }\n  });\n\n  return (\n    <div>\n      <h1>ProKickballer</h1>\n      <div>\n        <h2>Game Status</h2>\n        <h3>Inning: {INNINGS[currentInning]}</h3>\n        <button onClick={incrementBalls}>Balls: {balls}</button>\n        <button onClick={incrementStrikes}>Strikes: {strikes}</button>\n        <button onClick={incrementFouls}>Fouls: {fouls}</button>\n        <button onClick={incrementOuts}>Outs: {outs}</button>\n      </div>\n      <div>\n        <h3>{hName}</h3>\n        {/* <input\n            id=\"home-team-name\"\n            key=\"hName\"\n            type=\"text\"\n            name=\"hName\"\n            className=\"form-control\"\n            autoComplete=\"off\"\n            value={hName}\n            onChange={handleChange}\n          /> */}\n        <button onClick={() => setHomeState(homeState + 1)}>\n          Score: {homeState}\n        </button>\n      </div>\n      <div>\n        <h3>{aName}</h3>\n        <button onClick={() => setAwayState(awayState => awayState + 1)}>\n          Score: {awayState}\n        </button>\n      </div>\n      <form onSubmit={handleSubmit}>\n        <button type=\"submit\" className=\"btn\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\nimport axios from \"axios\";\n\nconst API_URL = \"//localhost:8080/api/ver0001/matches\";\n\nlet matches = [];\nlet matchData = {};\nconst getMatches = async function() {\n  const resMatches = await axios\n    .get(API_URL)\n    .then(function(res) {\n      console.log(\"res 7\", res);\n      matchData = res;\n    })\n    .catch(function(err) {\n      console.log(\"err 10\", err);\n    });\n};\n\nsetTimeout(() => {\n  getMatches();\n}, 5000);\n\nmatches = matchData.data;\nconsole.log(\"matches 25\", matches);\n\nexport default function Matches() {\n  getMatches();\n  console.log(\"matches 29\", matches);\n  return (\n    <div>\n      <h2>Matches</h2>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Match0001 from \"./components/Match/Match0001\";\nimport Matches from \"./components/Match/Matches\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Match0001 />\n        <Matches />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}